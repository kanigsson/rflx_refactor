--
-- Generated by RecordFlux 0.9.1.dev35+g24dfa21f on 2023-03-31
--
-- Copyright (C) 2018-2023 AdaCore GmbH
--
-- This file is distributed under the terms of the GNU Affero General Public License version 3.
--

pragma Style_Checks ("N3aAbCdefhiIklnOprStux");
pragma Warnings (Off, "redundant conversion");
with RFLX.RFLX_Types;

package RFLX.Ethernet with
  SPARK_Mode
is

   type Address is range 0 .. 2**48 - 1 with
     Size =>
       48;

   use type RFLX.RFLX_Types.Base_Integer;

   function Valid_Address (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 281474976710655);

   function To_Base_Integer (Val : RFLX.Ethernet.Address) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.Ethernet.Address is
     (RFLX.Ethernet.Address (Val))
    with
     Pre =>
       Valid_Address (Val);

   type Type_Length is range 46 .. 2**16 - 1 with
     Size =>
       16;

   function Valid_Type_Length (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val >= 46
      and Val <= 65535);

   function To_Base_Integer (Val : RFLX.Ethernet.Type_Length) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.Ethernet.Type_Length is
     (RFLX.Ethernet.Type_Length (Val))
    with
     Pre =>
       Valid_Type_Length (Val);

   type TPID is range 16#8100# .. 16#8100# with
     Size =>
       16;

   function Valid_TPID (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val = 16#8100#);

   function To_Base_Integer (Val : RFLX.Ethernet.TPID) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.Ethernet.TPID is
     (RFLX.Ethernet.TPID (Val))
    with
     Pre =>
       Valid_TPID (Val);

   type TCI is range 0 .. 2**16 - 1 with
     Size =>
       16;

   function Valid_TCI (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val <= 65535);

   function To_Base_Integer (Val : RFLX.Ethernet.TCI) return RFLX.RFLX_Types.Base_Integer is
     (RFLX.RFLX_Types.Base_Integer (Val));

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.Ethernet.TCI is
     (RFLX.Ethernet.TCI (Val))
    with
     Pre =>
       Valid_TCI (Val);

   type Ether_Type is (ET_IPV4, ET_ARP, ET_WAKE_ON_LAN, ET_SRP, ET_AVTB, ET_TRILL, ET_RARP, ET_VLAN_TAG, ET_SLPP, ET_VLACP, ET_IPX, ET_QNX_QNET, ET_IPV6, ET_FLOW_CONTROL, ET_LACP, ET_MPLS_UNICAST, ET_MPLS_MULTICAST, ET_PPPOE_DISCOVERY, ET_PPPOE_SESSION, ET_HOMEPLUG_10_MME, ET_EAP_OVER_LAN, ET_PROFINET, ET_ATA_OVER_ETHERNET, ET_ETHERCAT, ET_SERVICE_VLAN_TAG, ET_ETHERNET_POWERLINK, ET_GOOSE, ET_GSE, ET_SV, ET_LLDP, ET_SERCOS_III, ET_WSMP, ET_MRP, ET_MAC_SECURITY, ET_PBB, ET_PTP, ET_NC_SI, ET_PRP, ET_CFM, ET_FCOE, ET_FCOE_INIT, ET_ROCE, ET_TTE, ET_HSR, ET_CTP, ET_VLAN_TAG_DOUBLE, ET_REDUNDANCY_TAG) with
     Size =>
       16;
   for Ether_Type use (ET_IPV4 => 2048, ET_ARP => 2054, ET_WAKE_ON_LAN => 2114, ET_SRP => 8938, ET_AVTB => 8944, ET_TRILL => 8947, ET_RARP => 32821, ET_VLAN_TAG => 33024, ET_SLPP => 33026, ET_VLACP => 33027, ET_IPX => 33079, ET_QNX_QNET => 33284, ET_IPV6 => 34525, ET_FLOW_CONTROL => 34824, ET_LACP => 34825, ET_MPLS_UNICAST => 34887, ET_MPLS_MULTICAST => 34888, ET_PPPOE_DISCOVERY => 34915, ET_PPPOE_SESSION => 34916, ET_HOMEPLUG_10_MME => 34939, ET_EAP_OVER_LAN => 34958, ET_PROFINET => 34962, ET_ATA_OVER_ETHERNET => 34978, ET_ETHERCAT => 34980, ET_SERVICE_VLAN_TAG => 34984, ET_ETHERNET_POWERLINK => 34987, ET_GOOSE => 35000, ET_GSE => 35001, ET_SV => 35002, ET_LLDP => 35020, ET_SERCOS_III => 35021, ET_WSMP => 35036, ET_MRP => 35043, ET_MAC_SECURITY => 35045, ET_PBB => 35047, ET_PTP => 35063, ET_NC_SI => 35064, ET_PRP => 35067, ET_CFM => 35074, ET_FCOE => 35078, ET_FCOE_INIT => 35092, ET_ROCE => 35093, ET_TTE => 35101, ET_HSR => 35119, ET_CTP => 36864, ET_VLAN_TAG_DOUBLE => 37120, ET_REDUNDANCY_TAG => 61889);

   function Valid_Ether_Type (Val : RFLX.RFLX_Types.Base_Integer) return Boolean is
     (Val in 16#800# | 16#806# | 16#842# | 16#22F0# | 16#22F3# | 16#22EA# | 16#8035# | 16#8100# | 16#8102# | 16#8103# | 16#8137# | 16#8204# | 16#86DD# | 16#8808# | 16#8809# | 16#8847# | 16#8848# | 16#8863# | 16#8864# | 16#887B# | 16#888E# | 16#8892# | 16#88A2# | 16#88A4# | 16#88A8# | 16#88AB# | 16#88B8# | 16#88B9# | 16#88BA# | 16#88CC# | 16#88CD# | 16#88DC# | 16#88E3# | 16#88E5# | 16#88E7# | 16#88F7# | 16#88F8# | 16#88FB# | 16#8902# | 16#8906# | 16#8914# | 16#8915# | 16#891D# | 16#892F# | 16#9000# | 16#9100# | 16#F1C1#);

   function To_Base_Integer (Enum : RFLX.Ethernet.Ether_Type) return RFLX.RFLX_Types.Base_Integer is
     ((case Enum is
          when ET_IPV4 =>
             16#800#,
          when ET_ARP =>
             16#806#,
          when ET_WAKE_ON_LAN =>
             16#842#,
          when ET_AVTB =>
             16#22F0#,
          when ET_TRILL =>
             16#22F3#,
          when ET_SRP =>
             16#22EA#,
          when ET_RARP =>
             16#8035#,
          when ET_VLAN_TAG =>
             16#8100#,
          when ET_SLPP =>
             16#8102#,
          when ET_VLACP =>
             16#8103#,
          when ET_IPX =>
             16#8137#,
          when ET_QNX_QNET =>
             16#8204#,
          when ET_IPV6 =>
             16#86DD#,
          when ET_FLOW_CONTROL =>
             16#8808#,
          when ET_LACP =>
             16#8809#,
          when ET_MPLS_UNICAST =>
             16#8847#,
          when ET_MPLS_MULTICAST =>
             16#8848#,
          when ET_PPPOE_DISCOVERY =>
             16#8863#,
          when ET_PPPOE_SESSION =>
             16#8864#,
          when ET_HOMEPLUG_10_MME =>
             16#887B#,
          when ET_EAP_OVER_LAN =>
             16#888E#,
          when ET_PROFINET =>
             16#8892#,
          when ET_ATA_OVER_ETHERNET =>
             16#88A2#,
          when ET_ETHERCAT =>
             16#88A4#,
          when ET_SERVICE_VLAN_TAG =>
             16#88A8#,
          when ET_ETHERNET_POWERLINK =>
             16#88AB#,
          when ET_GOOSE =>
             16#88B8#,
          when ET_GSE =>
             16#88B9#,
          when ET_SV =>
             16#88BA#,
          when ET_LLDP =>
             16#88CC#,
          when ET_SERCOS_III =>
             16#88CD#,
          when ET_WSMP =>
             16#88DC#,
          when ET_MRP =>
             16#88E3#,
          when ET_MAC_SECURITY =>
             16#88E5#,
          when ET_PBB =>
             16#88E7#,
          when ET_PTP =>
             16#88F7#,
          when ET_NC_SI =>
             16#88F8#,
          when ET_PRP =>
             16#88FB#,
          when ET_CFM =>
             16#8902#,
          when ET_FCOE =>
             16#8906#,
          when ET_FCOE_INIT =>
             16#8914#,
          when ET_ROCE =>
             16#8915#,
          when ET_TTE =>
             16#891D#,
          when ET_HSR =>
             16#892F#,
          when ET_CTP =>
             16#9000#,
          when ET_VLAN_TAG_DOUBLE =>
             16#9100#,
          when ET_REDUNDANCY_TAG =>
             16#F1C1#));

   pragma Warnings (Off, "unreachable branch");

   function To_Actual (Val : RFLX.RFLX_Types.Base_Integer) return RFLX.Ethernet.Ether_Type is
     ((case Val is
          when 16#800# =>
             ET_IPV4,
          when 16#806# =>
             ET_ARP,
          when 16#842# =>
             ET_WAKE_ON_LAN,
          when 16#22F0# =>
             ET_AVTB,
          when 16#22F3# =>
             ET_TRILL,
          when 16#22EA# =>
             ET_SRP,
          when 16#8035# =>
             ET_RARP,
          when 16#8100# =>
             ET_VLAN_TAG,
          when 16#8102# =>
             ET_SLPP,
          when 16#8103# =>
             ET_VLACP,
          when 16#8137# =>
             ET_IPX,
          when 16#8204# =>
             ET_QNX_QNET,
          when 16#86DD# =>
             ET_IPV6,
          when 16#8808# =>
             ET_FLOW_CONTROL,
          when 16#8809# =>
             ET_LACP,
          when 16#8847# =>
             ET_MPLS_UNICAST,
          when 16#8848# =>
             ET_MPLS_MULTICAST,
          when 16#8863# =>
             ET_PPPOE_DISCOVERY,
          when 16#8864# =>
             ET_PPPOE_SESSION,
          when 16#887B# =>
             ET_HOMEPLUG_10_MME,
          when 16#888E# =>
             ET_EAP_OVER_LAN,
          when 16#8892# =>
             ET_PROFINET,
          when 16#88A2# =>
             ET_ATA_OVER_ETHERNET,
          when 16#88A4# =>
             ET_ETHERCAT,
          when 16#88A8# =>
             ET_SERVICE_VLAN_TAG,
          when 16#88AB# =>
             ET_ETHERNET_POWERLINK,
          when 16#88B8# =>
             ET_GOOSE,
          when 16#88B9# =>
             ET_GSE,
          when 16#88BA# =>
             ET_SV,
          when 16#88CC# =>
             ET_LLDP,
          when 16#88CD# =>
             ET_SERCOS_III,
          when 16#88DC# =>
             ET_WSMP,
          when 16#88E3# =>
             ET_MRP,
          when 16#88E5# =>
             ET_MAC_SECURITY,
          when 16#88E7# =>
             ET_PBB,
          when 16#88F7# =>
             ET_PTP,
          when 16#88F8# =>
             ET_NC_SI,
          when 16#88FB# =>
             ET_PRP,
          when 16#8902# =>
             ET_CFM,
          when 16#8906# =>
             ET_FCOE,
          when 16#8914# =>
             ET_FCOE_INIT,
          when 16#8915# =>
             ET_ROCE,
          when 16#891D# =>
             ET_TTE,
          when 16#892F# =>
             ET_HSR,
          when 16#9000# =>
             ET_CTP,
          when 16#9100# =>
             ET_VLAN_TAG_DOUBLE,
          when 16#F1C1# =>
             ET_REDUNDANCY_TAG,
          when others =>
             RFLX.Ethernet.Ether_Type'Last))
    with
     Pre =>
       Valid_Ether_Type (Val);

   pragma Warnings (On, "unreachable branch");

end RFLX.Ethernet;
